AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy K8mgr Instances
#----------------------------------------------
Parameters:
  Environment:
    Type: String
    AllowedPattern: "[a-zA-Z0-9=-@+?[?]?<?>._]*"
    ConstraintDescription: Can contain only ASCII characters.
    Description: (required) Environment name
  #------------------
  InstanceType:
    Description: (Optional) Instance type
    Type: String
    Default: t3.large
  AmiId:
    Description: (Optional) AMI ID
    Type: String
    Default: ami-00d101850e971728d
  AutoRecoveryMinutes:
    Description: (optional) Auto Recovery Time(Minutes)
    Type: Number
    Default: 1
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: Environment
        Parameters: 
          - Environment
      -
        Label:
          default:  Instances
        Parameters:
          - InstanceType
          - AmiId
          - AutoRecoveryMinutes
#----------------------------------------------
Conditions: 
  CheckAutoRecovery: !Not [!Equals [!Ref AutoRecoveryMinutes, 0 ]]
#----------------------------------------------
Resources:
  #------------------ DockerDev:
  K8sMgr:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Sub ${AmiId}
      InstanceType: !Sub ${InstanceType}
      IamInstanceProfile:
        Fn::ImportValue: !Sub ${Environment}-Iam-ManagerInstanceRolePlofile
      Monitoring: yes
      NetworkInterfaces:
        - DeviceIndex: '0'
          SubnetId:
            Fn::ImportValue: !Sub ${Environment}-VpcFunc-PublicSubnet1Id
          GroupSet:
            - Fn::ImportValue: !Sub ${Environment}-Sg-MgrInstanceSGId
          #AssociatePublicIpAddress: true
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-K8sMgr
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Update ALL rpms, and change hostname to Userfrendly name 
          yum -y update
          hostnamectl set-hostname "${Environment}-K8sMgr"

          # Setup AWS CLI
          aws configure set region ${AWS::Region}
          aws configure set output json

          # Setup kubectl command
          #cd /tmp
          #curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
          #curl -o kubectl.sha256 https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl.sha256
          #openssl sha1 -sha256 kubectl
          #chmod +x ./kubectl
          #mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH

  K8sMgrAutoRecovery:
    Type: AWS::CloudWatch::Alarm
    Condition: CheckAutoRecovery
    Properties:
      AlarmDescription: AutoRecovery for the K8sMgr
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: !Ref AutoRecoveryMinutes
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - !Sub "arn:aws:automate:${AWS::Region}:ec2:recover"
      - !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:admin"
      Dimensions:
      - Name: InstanceId
        Value: !Ref K8sMgr
    DependsOn: K8sMgr
  K8sMgrLocalDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName:
        Fn::ImportValue: !Sub ${Environment}-VpcFunc-VpcInternalDnsName
      Comment: A record for the private IP address of the K8sMgr.
      Name:
        Fn::Join:
          - ""
          - - "k8smgr."
            - Fn::ImportValue: !Sub ${Environment}-VpcFunc-VpcInternalDnsName
      Type: A
      TTL: 60
      ResourceRecords:
        - !GetAtt K8sMgr.PrivateIp
Outputs:
  #---------------- EC2 Instance
  K8sMgrId:
    Description: DockerDev Instance ID
    Value: !Ref K8sMgr
    Export:
      Name: !Sub ${AWS::StackName}-K8sMgrId